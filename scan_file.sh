#!/bin/bash

# 
# Author: Fabrizio Cau
#
# Description: 
#  This script uploads the file passed as argument to Virus Total 
#  for check and print information about its scan report
#

# config parameters 
tmp_dir="./tmp" # directory where temporary files are extracted
con_to=1 # VirusTotal curl connection timeout
wait_until_scan_complete=2 # time to wait until scan is completed
debug_mode=1 # when enabled prints information during wait-on-queued and on clean files 

# base url from Virus Total
URL="https://www.virustotal.com/api/v3/files"


FILE="$1"
VT_APIKEY="$2"


# checks http response code. if code is over 400 or 000 it prints error details
response_check() {
    local urltmp="$1"    
    if [[ $urltmp == "000" ]]; then 
        echo "Call to VirusTotal failed: no answer was received"
        rm -rf $FILE
        exit 1        
    fi
    http_code=${urltmp: -3}
    http_content=${urltmp%???}
    if [[ $err_code -ge 400 ]]; then
        err_msg=$(echo "$http_content" | jq -r '.error.message' )
        echo "Call to VirusTotal failed: $err_msg"
        rm -rf $FILE
        exit 1
    fi
}


# get file size
FILE_SIZE=$(wc -c "$FILE" | awk '{print $1}' )

if [[ $FILE_SIZE -gt 33554431 ]]; then
    # if file is bigger than 32MB it retrieves upload url from Virus Total
    URL_tmp=$(curl -s --request GET --url "https://www.virustotal.com/api/v3/files/upload_url" --header "x-apikey: $VT_APIKEY" --connect-timeout $con_to -w "%{http_code}")   
    response_check "$URL_tmp"
    json_content=${URL_tmp%???}
    URL=$(echo $json_content | jq -r .data)
fi


# uploads the file in Virus Total for scan and extracts the analysis id
URL_tmp=$(curl -s --request POST --url "$URL" --header "x-apikey: $VT_APIKEY" --form "file=@$FILE" --connect-timeout $con_to -w "%{http_code}")
response_check "$URL_tmp"
json_content=${URL_tmp%???}

#echo "error 1, json content: $json_content"
FILEID=$(echo "$json_content" | jq -r '.data.id' )
#echo "error 2"
Attempt=1

SCAN_RES_STAT="notyetstarted" # dummy value to enter loop
while [ "$SCAN_RES_STAT"  != "completed" ];
do
    URL_tmp=$(curl -s --request GET --url "https://www.virustotal.com/api/v3/analyses/$FILEID" --header "x-apikey: $VT_APIKEY" --connect-timeout $con_to -w "%{http_code}")
    response_check "$URL_tmp"
    json_content=${URL_tmp%???}
    
    SCAN_RES_STAT=$(echo "$json_content" | jq -r '.data.attributes.status')

    if [[ $debug_mode -eq 1 ]]; then
        echo "Checking file $FILE: [$SCAN_RES_STAT] (Attempt after: $Attempt s)"
        Attempt=$((Attempt+wait_until_scan_complete))
    fi
    sleep $wait_until_scan_complete
done



# now it's completed or script ended, malicious result can be parsed
SCAN_RES_MAL=$(echo $json_content | jq -r '.data.attributes.stats.malicious')


# if report shows malicious results then print its count
if [[ $SCAN_RES_MAL -ne 0 ]]; then
    MAL_FILES=$((MAL_FILES+1))
    echo "The file $FILE [$FILE_SIZE bytes] contains malicious code in $SCAN_RES_MAL reports"
elif [[ $debug_mode -eq 1 ]]; then    
    echo "File $FILE is clean"
fi

# file has just been checked, delete it
rm -rf $FILE


